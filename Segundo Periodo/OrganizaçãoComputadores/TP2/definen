




















/*
//Essa funcao vai varrer as caches e descobrir qual endereco dela pode ser substituido, retornando a posicao que e
int definen (blocodememoria *cache1, blocodememoria *cache2, blocodememoria *cache3, int n) {
    int soma1 = 0;
    int valor1, valor2;
    if (n == 1) {
        for (int i = 0; i < tamcache1; i++) {
            valor1 = cache1[i].prioridadeimportancia * 100000;
            valor2 = cache1[i].prioridadeidade * 10;
            cache1[i].soma = valor1 + valor2;
        }
        int menor = cache1[0].soma;
        for (int j = 0; j < tamcache1; j++) {
            if (cache1[j].soma < menor) {
                menor = cache1[j].soma;
            }
        }
        int posicaonacachesubstituivel;
        for (int i = 0; i < tamcache1; i++) {
            if (cache1[i].soma == menor) {
                posicaonacachesubstituivel = i;
            }
        }
        return posicaonacachesubstituivel; //oq tiver menor prioridade vai ser o apagado
    }

    if (n == 2) {
        for (int i = 0; i < tamcache2; i++) {
            valor1 = cache2[i].prioridadeimportancia * 100000;
            valor2 = cache2[i].prioridadeidade * 10;
            cache2[i].soma = valor1 + valor2;
        }
        int menor = cache2[0].soma;
        for (int j = 0; j < tamcache2; j++) {
            if (cache2[j].soma < menor) {
                menor = cache2[j].soma;
            }
        }
        int posicaonacachesubstituivel;
        for (int i = 0; i < tamcache2; i++) {
            if (cache2[i].soma == menor) {
                posicaonacachesubstituivel = i;
            }
        }
        return posicaonacachesubstituivel;
    }
    
    else {
        for (int i = 0; i < tamcache3; i++) {
            valor1 = cache3[i].prioridadeimportancia * 100000;
            valor2 = cache3[i].prioridadeidade * 10;
            cache3[i].soma = valor1 + valor2;
        }
        int menor = cache3[0].soma;
        for (int j = 0; j < tamcache3; j++) {
            if (cache3[j].soma < menor) {
                menor = cache3[j].soma;
            }
        }
        int posicaonacachesubstituivel;
        for (int i = 0; i < tamcache3; i++) {
            if (cache3[i].soma == menor) {
                posicaonacachesubstituivel = i;
            }
        }
        return posicaonacachesubstituivel;
    }
    
}
*/

//preciso atribuir valores pra prioridade de importancia e de idade;
//trazer da ram pra cache3
//cache miss e quando tira da ram
//cache hit eq aundo tira das caches